{"version":3,"sources":["components/contactForm/ContactForm.module.css","components/contactForm/ContactForm.js","components/filter/FilterByName.js","components/contactList/ContactList.js","App.js","index.js","components/contactList/ContactList.module.css","App.module.css"],"names":["module","exports","ContactForm","state","name","number","handleChange","e","target","value","setState","handleSubmitForm","preventDefault","updatedState","id","uuidv4","props","handlerFormSubmit","filter","className","s","container","onSubmit","this","label","htmlFor","input","placeholder","type","onChange","pattern","title","required","btn","Component","FilterByName","nameFinder","ContactList","getContacts","deleteContactFromList","map","item","onClick","App","contacts","data","find","contact","Notiflix","Notify","failure","prevState","noramlizedDataInput","toLowerCase","includes","savedContactList","localStorage","getItem","parsedContactList","JSON","parse","prevProps","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ade96e96.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactForm_container__1YCLE\",\"label\":\"ContactForm_label__3cSwc\",\"input\":\"ContactForm_input__2u7Lv\",\"btn\":\"ContactForm_btn__2Kwxa\"};","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { v4 as uuidv4 } from 'uuid';\nimport s from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmitForm = e => {\n    e.preventDefault();\n    let nameId = uuidv4();\n    const updatedState = {\n      id: nameId,\n      name: this.state.name,\n      number: this.state.number,\n    };\n\n    this.props.handlerFormSubmit(updatedState);\n\n    this.setState({\n      filter: '',\n      name: '',\n      number: '',\n    });\n  };\n\n  render() {\n    return (\n      <form className={s.container} onSubmit={this.handleSubmitForm}>\n        <label className={s.label} htmlFor=\"inputName\">\n          Name\n        </label>\n        <input\n          className={s.input}\n          placeholder=\"e.g. Elon Musk\"\n          type=\"text\"\n          id=\"inputName\"\n          name=\"name\"\n          value={this.state.name}\n          onChange={this.handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n        <label className={s.label} htmlFor=\"inputPhone\">\n          Phone number\n        </label>\n        <input\n          className={s.input}\n          placeholder=\"e.g. +1 310-363-6000 \"\n          id=\"inputPhone\"\n          type=\"tel\"\n          name=\"number\"\n          value={this.state.number}\n          onChange={this.handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n        <button className={s.btn} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  handlerFormSubmit: PropTypes.func,\n};\n\nexport default ContactForm;\n","import PropTypes from 'prop-types';\nimport s from '../contactForm/ContactForm.module.css';\n\nconst FilterByName = ({ filter, nameFinder }) => {\n  return (\n    <div className={s.container}>\n      <p className={s.label}>Find contacts by name</p>\n      <input\n        type=\"text\"\n        className={s.input}\n        placeholder=\"find contact\"\n        onChange={nameFinder}\n        name=\"filter\"\n        value={filter}\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n      />\n    </div>\n  );\n};\n\nFilterByName.propTypes = {\n  filter: PropTypes.string.isRequired,\n  nameFinder: PropTypes.func,\n};\n\nexport default FilterByName;\n","import PropTypes from 'prop-types';\nimport s from './ContactList.module.css';\n\nconst ContactList = ({ getContacts, deleteContactFromList }) => {\n  return (\n    <div className={s.container}>\n      <ul>\n        {getContacts.map(item => (\n          <li key={item.id} className={s.item}>\n            <span>\n              {item.name}: {item.number}\n            </span>\n            <button\n              className={s.btn}\n              type=\"submit\"\n              onClick={() => deleteContactFromList(item)}\n            >\n              Delete\n            </button>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  getContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\nexport default ContactList;\n","import PropTypes from \"prop-types\";\nimport React, { Component } from \"react\";\nimport Notiflix from \"notiflix\";\nimport ContactForm from \"./components/contactForm/ContactForm\";\nimport FilterByName from \"./components/filter/FilterByName\";\nimport ContactList from \"./components/contactList/ContactList\";\nimport s from \"./App.module.css\";\n\nclass App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n\n  // --------- Check if contact already in contactList and add Contact to list if not  ---------\n\n  handlerFormSubmit = (data) => {\n    const findSpecificContact = this.state.contacts.find(\n      (contact) => contact.name === data.name\n    );\n\n    !findSpecificContact\n      ? this.setState((prevState) => ({\n          contacts: [data, ...prevState.contacts],\n        }))\n      : Notiflix.Notify.failure(\n          `Sorry, but user with name ${data.name} has already registered in contacts. Please specify your name!`\n        );\n  };\n\n  // --------- Filtering contactList to find specific ---------\n\n  nameFinder = (e) => {\n    this.setState({\n      filter: e.target.value,\n    });\n  };\n\n  // --------- Getting contactList for render ---------\n\n  getContacts = () => {\n    const noramlizedDataInput = this.state.filter.toLowerCase();\n\n    return this.state.contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(noramlizedDataInput)\n    );\n  };\n\n  // --------- Deleting contact from contactList ---------\n\n  deleteContactFromList = (data) => {\n    return this.setState((prevState) => ({\n      contacts: prevState.contacts.filter((contact) => contact.id !== data.id),\n    }));\n  };\n\n  // --------- Add data to localStorage and get data from localStorage ---------\n\n  componentDidMount() {\n    const savedContactList = localStorage.getItem(\"contactList\");\n    const parsedContactList = JSON.parse(savedContactList);\n\n    if (parsedContactList) {\n      this.setState({ contacts: parsedContactList });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (this.state.contacts !== prevState.contacts) {\n      localStorage.setItem(\"contactList\", JSON.stringify(this.state.contacts));\n    }\n  }\n\n  // --------- render ---------\n\n  render() {\n    return (\n      <div className={s.container}>\n        <h1 className={s.title}>Phonebook</h1>\n        <ContactForm handlerFormSubmit={this.handlerFormSubmit} />\n\n        <h2 className={s.title}>Contacts</h2>\n        <FilterByName filter={this.state.filter} nameFinder={this.nameFinder} />\n        <ContactList\n          getContacts={this.getContacts()}\n          deleteContactFromList={this.deleteContactFromList}\n        />\n      </div>\n    );\n  }\n}\n\n// --------- propTypes options ---------\n\nApp.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"ContactList_container__JEZmi\",\"item\":\"ContactList_item__3_vMR\",\"btn\":\"ContactList_btn__2LqVP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__1MQN3\",\"title\":\"App_title__-GfWs\"};"],"sourceRoot":""}